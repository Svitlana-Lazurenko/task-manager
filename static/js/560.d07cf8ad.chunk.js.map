{"version":3,"file":"static/js/560.d07cf8ad.chunk.js","mappings":"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","sources":["components/Popup/Popup.styled.jsx","components/Popup/Popup.jsx","components/Tasks/TaskItem/TaskItem.styled.jsx","components/Tasks/TaskItem/TaskItem.jsx","components/Tasks/TaskList/TaskList.styled.jsx","components/Tasks/TaskList/TaskList.jsx","pages/Tasks.jsx","redux/categories/selectors.jsx","redux/popup/selectors.jsx","redux/tasks/selectors.jsx"],"sourcesContent":["import styled from '@emotion/styled';\n\nexport const PopupBackdrop = styled.div`\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100vw;\n  height: 100vh;\n  background-color: rgba(0, 0, 0, 0.5);\n`;\n\nexport const PopupContent = styled.div`\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n\n  width: 300px;\n  height: 200px;\n  padding: 18px;\n  background-color: rgb(141, 247, 241);\n  border-radius: 5px;\n  border: 1px solid rgb(128, 218, 11);\n`;\n\nexport const Container = styled.div``;\n\nexport const Wrapper = styled.div`\n  display: flex;\n  justify-content: space-evenly;\n  margin-top: 45px;\n`;\n\nexport const Button = styled.button`\n  padding: 10px 20px;\n  height: 40px;\n\n  border-radius: 0.6em;\n  border: 2px solid rgb(53, 202, 8);\n  background-color: rgb(216, 255, 193);\n\n  font-size: 10px;\n  letter-spacing: 4px;\n  text-transform: uppercase;\n  color: rgb(0, 167, 158);\n\n  :hover {\n    background-color: rgb(253, 239, 109);\n  }\n`;\nexport const Text = styled.h2`\n  font-weight: 400;\n  margin-bottom: 10px;\n`;\nexport const TextName = styled.span``;\nexport const Form = styled.form``;\nexport const Input = styled.input`\n  height: 25px;\n  padding: 10px 25px;\n  margin-top: 5px;\n\n  background: rgb(255, 249, 198);\n  border-radius: 10px;\n  border: 2px solid rgb(2, 211, 200);\n  outline-color: rgb(255, 224, 45);\n\n  font-size: 20px;\n  letter-spacing: 5px;\n`;\n","import React, { useEffect, useCallback, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { createPortal } from 'react-dom';\nimport {\n  setStatusEditCategoryPopup,\n  setStatusAddCategoryPopup,\n  setStatusDeleteTaskPopup,\n  setStatusDeleteCategoryPopup,\n  setStatusMenuPopup,\n} from 'redux/popup/slice';\nimport {\n  setCurrentCategoryId,\n  setCurrentCategoryName,\n} from 'redux/categories/slice';\nimport { setCurrentTaskId } from 'redux/tasks/slice';\nimport {\n  selectIsShowDeleteTaskPopup,\n  selectIsShowDeleteCategoryPopup,\n  selectIsShowEditCategoryPopup,\n  selectIsShowAddCategoryPopup,\n  selectIsShowMenuPopup,\n} from 'redux/popup/selectors';\nimport {\n  selectCurrentCategoryId,\n  selectCurrentCategoryName,\n} from 'redux/categories/selectors';\nimport { selectCurrentTaskId } from 'redux/tasks/selectors';\nimport { deleteTask } from 'redux/tasks/operations';\nimport {\n  deleteCategory,\n  changeCategory,\n  addCategory,\n} from 'redux/categories/operations';\nimport {\n  PopupBackdrop,\n  PopupContent,\n  Container,\n  Button,\n  Text,\n  TextName,\n  Form,\n  Input,\n  Wrapper,\n} from './Popup.styled';\n\nconst Popup = () => {\n  const isShowDeleteTaskPopup = useSelector(selectIsShowDeleteTaskPopup);\n  const isShowDeleteCategoryPopup = useSelector(\n    selectIsShowDeleteCategoryPopup\n  );\n  const isShowAddCategoryPopup = useSelector(selectIsShowAddCategoryPopup);\n  const isShowEditCategoryPopup = useSelector(selectIsShowEditCategoryPopup);\n  const isShowMenuPopup = useSelector(selectIsShowMenuPopup);\n  const categoryName = useSelector(selectCurrentCategoryName);\n  const categoryId = useSelector(selectCurrentCategoryId);\n  const taskId = useSelector(selectCurrentTaskId);\n\n  const dispatch = useDispatch();\n  const [name, setName] = useState(categoryName);\n\n  const resetState = useCallback(() => {\n    dispatch(setStatusDeleteTaskPopup(false));\n    dispatch(setStatusDeleteCategoryPopup(false));\n    dispatch(setStatusEditCategoryPopup(false));\n    dispatch(setStatusAddCategoryPopup(false));\n    dispatch(setStatusMenuPopup(false));\n    dispatch(setCurrentTaskId(null));\n    dispatch(setCurrentCategoryId(null));\n    dispatch(setCurrentCategoryName(''));\n  }, [dispatch]);\n\n  useEffect(() => {\n    const handleKeyDown = e => {\n      if (e.code === 'Escape') {\n        resetState();\n      }\n    };\n    window.addEventListener('keydown', handleKeyDown);\n    return () => {\n      window.removeEventListener('keydown', handleKeyDown);\n    };\n  }, [dispatch, resetState]);\n\n  const handleChange = e => {\n    setName(e.target.value);\n  };\n\n  const handleBackdropClick = e => {\n    if (e.currentTarget === e.target) {\n      resetState();\n    }\n  };\n\n  const handleCloseClick = () => {\n    resetState();\n  };\n\n  const handleOnEditCategoryPopup = e => {\n    dispatch(setStatusMenuPopup(false));\n    dispatch(setStatusEditCategoryPopup(true));\n  };\n\n  const handleOnDeleteCategoryPopup = e => {\n    dispatch(setStatusMenuPopup(false));\n    dispatch(setStatusDeleteCategoryPopup(true));\n  };\n\n  const handleSubmitNewCategory = e => {\n    e.preventDefault();\n    const form = e.currentTarget;\n    const name = form.elements.name.value.trim();\n    dispatch(addCategory({ name }));\n    form.reset();\n    resetState();\n  };\n\n  const handleSubmitEditedCategory = e => {\n    e.preventDefault();\n    const form = e.currentTarget;\n    const name = form.elements.name.value.trim();\n    dispatch(\n      changeCategory({\n        id: categoryId,\n        name,\n      })\n    );\n    form.reset();\n    resetState();\n  };\n\n  const handleSubmitDeletedCategory = e => {\n    e.preventDefault();\n    dispatch(deleteCategory(categoryId));\n    resetState();\n  };\n\n  const handleSubmitDeletedTask = e => {\n    e.preventDefault();\n    dispatch(deleteTask(taskId));\n    resetState();\n  };\n\n  return createPortal(\n    <PopupBackdrop onClick={handleBackdropClick}>\n      <PopupContent>\n        {isShowMenuPopup && (\n          <Container>\n            <Wrapper>\n              <Button type=\"button\" onClick={handleOnEditCategoryPopup}>\n                Edit\n              </Button>\n              <Button type=\"button\" onClick={handleOnDeleteCategoryPopup}>\n                Delete\n              </Button>\n            </Wrapper>\n          </Container>\n        )}\n        {isShowDeleteCategoryPopup && (\n          <Container>\n            <Text>Do you want to delete this category ?</Text>\n            <Wrapper>\n              <Button type=\"button\" onClick={handleSubmitDeletedCategory}>\n                yes\n              </Button>\n              <Button type=\"button\" onClick={handleCloseClick}>\n                no\n              </Button>\n            </Wrapper>\n          </Container>\n        )}\n        {isShowEditCategoryPopup && (\n          <Container>\n            <Form onSubmit={handleSubmitEditedCategory}>\n              <Text>Edit {categoryName} category</Text>\n              <label>\n                <TextName>name: </TextName>\n                <Input\n                  name=\"name\"\n                  type=\"text\"\n                  value={name}\n                  onChange={handleChange}\n                />\n              </label>\n              <Wrapper>\n                <Button type=\"submit\">save</Button>\n                <Button type=\"button\" onClick={handleCloseClick}>\n                  cancel\n                </Button>\n              </Wrapper>\n            </Form>\n          </Container>\n        )}\n        {isShowAddCategoryPopup && (\n          <Container>\n            <Form onSubmit={handleSubmitNewCategory}>\n              <Text>Add new category</Text>\n              <label>\n                <TextName>name: </TextName>\n                <Input\n                  name=\"name\"\n                  type=\"text\"\n                  value={name}\n                  onChange={handleChange}\n                />\n              </label>\n              <Wrapper>\n                <Button type=\"submit\">save</Button>\n                <Button type=\"button\" onClick={handleCloseClick}>\n                  cancel\n                </Button>\n              </Wrapper>\n            </Form>\n          </Container>\n        )}\n        {isShowDeleteTaskPopup && (\n          <Container>\n            <Text>Do you want to delete this task ?</Text>\n            <Wrapper>\n              <Button type=\"button\" onClick={handleSubmitDeletedTask}>\n                yes\n              </Button>\n              <Button type=\"button\" onClick={handleCloseClick}>\n                no\n              </Button>\n            </Wrapper>\n          </Container>\n        )}\n      </PopupContent>\n    </PopupBackdrop>,\n    document.querySelector('#task-popup-root')\n  );\n};\n\nexport default Popup;\n","import styled from '@emotion/styled';\n\nexport const Item = styled.li`\n  display: flex;\n  flex-direction: column;\n\n  padding: 15px 15px;\n  margin: 0 auto;\n  width: 247px;\n\n  background-color: rgb(255, 236, 161);\n  border-radius: 10px;\n  border: 2px solid rgb(53, 202, 8);\n  }\n`;\n\nexport const TextName = styled.span`\n  font-size: 27px;\n  letter-spacing: 4px;\n  margin-bottom: 15px;\n`;\n\nexport const Text = styled.span`\n  font-size: 20px;\n  letter-spacing: 4px;\n  margin-bottom: 35px;\n`;\n\nexport const TextDate = styled.span`\n  font-size: 13px;\n  letter-spacing: 4px;\n  margin-bottom: 10px;\n`;\n\nexport const Wrapper = styled.div`\n  display: flex;\n  justify-content: space-between;\n`;\n\nexport const Button = styled.button`\n  padding: 10px 20px;\n  height: 40px;\n\n  border-radius: 0.6em;\n  border: 2px solid rgb(53, 202, 8);\n  background-color: rgb(216, 255, 193);\n\n  font-size: 10px;\n  letter-spacing: 4px;\n  text-transform: uppercase;\n  color: rgb(0, 167, 158);\n\n  :hover {\n    background-color: rgb(253, 239, 109);\n  }\n`;\n","import { useDispatch } from 'react-redux';\nimport { useNavigate } from 'react-router-dom';\nimport {\n  Item,\n  Text,\n  TextDate,\n  TextName,\n  Button,\n  Wrapper,\n} from './TaskItem.styled';\nimport { setStatusDeleteTaskPopup } from 'redux/popup/slice';\nimport { setCurrentTaskId, setCurrentTask } from 'redux/tasks/slice';\n\nconst TaskItem = ({ id, name, description, dateStart, dateEnd }) => {\n  const navigate = useNavigate();\n  const dispatch = useDispatch();\n\n  const handleOnPopup = () => {\n    dispatch(setStatusDeleteTaskPopup(true));\n    dispatch(setCurrentTaskId(id));\n  };\n\n  const handleOnNavigateEditTask = () => {\n    dispatch(setCurrentTask({ id, name, description, dateStart, dateEnd }));\n    navigate(`/edit-task/${id}`);\n  };\n\n  return (\n    <Item>\n      <TextName>{name}</TextName>\n      <Text>{description}</Text>\n      <TextDate>date of start: {dateStart}</TextDate>\n      <TextDate>date of end: {dateEnd}</TextDate>\n      <Wrapper>\n        <Button type=\"button\" onClick={handleOnPopup}>\n          delete\n        </Button>\n        <Button type=\"button\" onClick={handleOnNavigateEditTask}>\n          edit\n        </Button>\n      </Wrapper>\n    </Item>\n  );\n};\n\nexport default TaskItem;\n","import styled from '@emotion/styled';\n\nexport const List = styled.ul`\n  width: 90%;\n  padding: 20px;\n  margin: 0 auto;\n\n  display: flex;\n  flex-wrap: wrap;\n  gap: 10px;\n\n  background-color: rgb(255, 245, 207);\n  border-radius: 10px;\n  border: 2px solid rgb(53, 202, 8);\n`;\n","import { useSelector } from 'react-redux';\nimport { selectTasks } from 'redux/tasks/selectors';\nimport TaskItem from 'components/Tasks/TaskItem/TaskItem';\nimport { List } from './TaskList.styled';\n\nconst TaskList = () => {\n  const tasks = useSelector(selectTasks);\n\n  return (\n    <List>\n      {tasks.map(({ _id, name, description, dateStart, dateEnd }) => (\n        <TaskItem\n          key={_id}\n          name={name}\n          description={description}\n          dateStart={dateStart}\n          dateEnd={dateEnd}\n          id={_id}\n        />\n      ))}\n    </List>\n  );\n};\n\nexport default TaskList;\n","import { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useParams, useNavigate } from 'react-router-dom';\nimport TaskList from 'components/Tasks/TaskList/TaskList';\nimport Popup from 'components/Popup/Popup';\nimport { fetchTasks } from 'redux/tasks/operations';\nimport { selectIsLoading } from 'redux/tasks/selectors';\nimport { selectIsShowDeleteTaskPopup } from 'redux/popup/selectors';\n\nconst styles = {\n  container: {\n    padding: '30px 0',\n  },\n  button: {\n    height: 40,\n\n    padding: '10px 20px',\n    display: 'block',\n    overflow: 'hidden',\n\n    border: '2px solid rgb(2, 211, 200)',\n    borderRadius: 10,\n\n    color: 'rgb(125, 202, 0)',\n    fontSize: 15,\n    fontWeight: 600,\n\n    textTransform: 'uppercase',\n    letterSpacing: 6,\n  },\n};\n\nexport default function Tasks() {\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n  const { id } = useParams();\n  const isShowDeleteTaskPopup = useSelector(selectIsShowDeleteTaskPopup);\n  const isLoading = useSelector(selectIsLoading);\n\n  useEffect(() => {\n    dispatch(fetchTasks(id));\n  }, [dispatch, id]);\n\n  const handleOnNavigateCreateTask = () => {\n    navigate(`/create-task/${id}`);\n  };\n\n  const handleOnNavigateCategories = () => {\n    navigate('/categories');\n  };\n\n  return (\n    <div style={styles.container}>\n      <button\n        type=\"button\"\n        onClick={handleOnNavigateCategories}\n        style={{\n          ...styles.button,\n          marginBottom: '10px',\n          marginLeft: '25px',\n          backgroundColor: 'transparent',\n        }}\n      >\n        Back\n      </button>\n      <div>{isLoading && 'Request in progress...'}</div>\n      <TaskList />\n      <button\n        type=\"button\"\n        onClick={handleOnNavigateCreateTask}\n        style={{\n          ...styles.button,\n          margin: '30px auto 0',\n          backgroundColor: 'rgb(193, 255, 252)',\n        }}\n      >\n        Add\n      </button>\n      {isShowDeleteTaskPopup && <Popup></Popup>}\n    </div>\n  );\n}\n","export const selectCategories = state => state.categories.categoriesArr;\n\nexport const selectIsLoading = state => state.categories.isLoading;\n\nexport const selectError = state => state.categories.error;\n\nexport const selectCurrentCategoryId = state =>\n  state.categories.currentCategoryId;\n\nexport const selectCurrentCategoryName = state =>\n  state.categories.currentCategoryName;\n","export const selectIsShowDeleteTaskPopup = state =>\n  state.popup.isShowDeleteTaskPopup;\n\nexport const selectIsShowDeleteCategoryPopup = state =>\n  state.popup.isShowDeleteCategoryPopup;\n\nexport const selectIsShowEditCategoryPopup = state =>\n  state.popup.isShowEditCategoryPopup;\n\nexport const selectIsShowAddCategoryPopup = state =>\n  state.popup.isShowAddCategoryPopup;\n\nexport const selectIsShowMenuPopup = state => state.popup.isShowMenuPopup;\n","export const selectTasks = state => state.tasks.tasksArr;\n\nexport const selectIsLoading = state => state.tasks.isLoading;\n\nexport const selectError = state => state.tasks.error;\n\nexport const selectCurrentTaskId = state => state.tasks.currentTaskId;\n\nexport const selectCurrentTask = state => state.tasks.currentTask;\n"],"names":["PopupBackdrop","styled","PopupContent","Container","Wrapper","Button","Text","TextName","Form","Input","isShowDeleteTaskPopup","useSelector","selectIsShowDeleteTaskPopup","isShowDeleteCategoryPopup","selectIsShowDeleteCategoryPopup","isShowAddCategoryPopup","selectIsShowAddCategoryPopup","isShowEditCategoryPopup","selectIsShowEditCategoryPopup","isShowMenuPopup","selectIsShowMenuPopup","categoryName","selectCurrentCategoryName","categoryId","selectCurrentCategoryId","taskId","selectCurrentTaskId","dispatch","useDispatch","useState","name","setName","resetState","useCallback","setStatusDeleteTaskPopup","setStatusDeleteCategoryPopup","setStatusEditCategoryPopup","setStatusAddCategoryPopup","setStatusMenuPopup","setCurrentTaskId","setCurrentCategoryId","setCurrentCategoryName","useEffect","handleKeyDown","e","code","window","addEventListener","removeEventListener","handleChange","target","value","handleCloseClick","createPortal","onClick","currentTarget","type","preventDefault","deleteCategory","onSubmit","form","elements","trim","changeCategory","id","reset","onChange","addCategory","deleteTask","document","querySelector","Item","TextDate","description","dateStart","dateEnd","navigate","useNavigate","setCurrentTask","List","tasks","selectTasks","map","_id","styles","container","padding","button","height","display","overflow","border","borderRadius","color","fontSize","fontWeight","textTransform","letterSpacing","Tasks","useParams","isLoading","selectIsLoading","fetchTasks","style","marginBottom","marginLeft","backgroundColor","margin","Popup","selectCategories","state","categories","categoriesArr","currentCategoryId","currentCategoryName","popup","tasksArr","currentTaskId","selectCurrentTask","currentTask"],"sourceRoot":""}