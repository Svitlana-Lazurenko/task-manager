{"version":3,"file":"static/js/598.4a8b9abe.chunk.js","mappings":"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","sources":["components/CreateOrEditTaskForm/CreateOrEditTaskForm.styled.jsx","components/CreateOrEditTaskForm/CreateOrEditTaskForm.jsx","pages/EditTask.jsx","redux/categories/selectors.jsx","redux/tasks/selectors.jsx"],"sourcesContent":["import styled from '@emotion/styled';\n\nexport const Form = styled.form`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n\n  width: 50%;\n  padding: 40px 40px 60px 40px;\n  margin: 0 auto;\n\n  background-color: rgb(8, 8, 8);\n  border-radius: 10px;\n  border: 2px solid rgb(53, 202, 8);\n`;\n\nexport const Label = styled.label`\n  display: flex;\n  flex-direction: column;\n  margin-bottom: 40px;\n  letter-spacing: 2px;\n`;\n\nexport const Text = styled.span`\n  display: block;\n  margin-bottom: 5px;\n  margin-left: 20px;\n\n  letter-spacing: 5px;\n  font-size: 15px;\n`;\n\nexport const InputText = styled.input`\n  height: 35px;\n  padding: 10px 25px;\n  margin-top: 5px;\n\n  background: transparent;\n  border-radius: 10px;\n  border: 2px solid rgb(53, 202, 8);\n  outline-color: rgb(53, 202, 8);\n\n  font-size: 20px;\n  color: rgb(240, 240, 240);\n  text-shadow: 0 0 1em rgb(53, 202, 8);\n  font-family: monospace;\n  letter-spacing: 5px;\n`;\n\nexport const InputTextArea = styled.textarea`\n  resize: vertical;\n`;\n\nexport const InputDate = styled.input``;\n\nexport const Button = styled.button`\n  height: 40px;\n  margin: 30px auto 0;\n  padding: 10px 20px;\n\n  display: block;\n  overflow: hidden;\n  position: relative;\n  transition: 0.5s;\n\n  background-color: transparent;\n  border: none;\n\n  color: rgb(240, 240, 240);\n  text-shadow: 0 0 1em rgb(53, 202, 8);\n  font-size: 15px;\n  font-family: monospace;\n  text-transform: uppercase;\n  letter-spacing: 6px;\n\n  :hover {\n    background: rgb(3, 244, 15);\n    color: rgb(240, 240, 240);\n    border-radius: 5px;\n    box-shadow: 0 0 5px rgb(3, 244, 15), 0 0 25px rgb(3, 244, 15),\n      0 0 50px rgb(3, 244, 15), 0 0 100px rgb(3, 244, 15);\n  }\n`;\n\nexport const Span = styled.span`\n  position: absolute;\n  display: block;\n\n  @keyframes btn-anim {\n    0% {\n      left: -100%;\n    }\n\n    50%,\n    100% {\n      left: 100%;\n    }\n  }\n\n  :first-of-type {\n    bottom: 2px;\n    left: -100%;\n    width: 100%;\n    height: 2px;\n    background: linear-gradient(90deg, transparent, rgb(3, 244, 15));\n    animation: btn-anim 2s linear infinite;\n  }\n`;\n","import { useDispatch, useSelector } from 'react-redux';\nimport React, { useState } from 'react';\nimport { useParams, useLocation, useNavigate } from 'react-router-dom';\n\nimport { addTask, changeTask } from 'redux/tasks/operations';\nimport { selectCurrentTask } from 'redux/tasks/selectors';\nimport { selectCurrentCategoryId } from 'redux/categories/selectors';\nimport {\n  Form,\n  Label,\n  Button,\n  Span,\n  Text,\n  InputText,\n  InputTextArea,\n  InputDate,\n} from './CreateOrEditTaskForm.styled';\n\nconst CreateOrEditTaskForm = () => {\n  const navigate = useNavigate();\n  const dispatch = useDispatch();\n  const location = useLocation();\n  const { id } = useParams();\n  const categoryId = useSelector(selectCurrentCategoryId);\n  const currentTask = useSelector(selectCurrentTask);\n\n  const locationArr = location.pathname.split('/');\n\n  const [name, setName] = useState(\n    locationArr[1] === 'create-task' ? '' : currentTask.name\n  );\n  const [description, setDescription] = useState(\n    locationArr[1] === 'create-task' ? '' : currentTask.description\n  );\n  const [dateStart, setDateStart] = useState(\n    locationArr[1] === 'create-task' ? '' : currentTask.dateStart\n  );\n  const [dateEnd, setDateEnd] = useState(\n    locationArr[1] === 'create-task' ? '' : currentTask.dateEnd\n  );\n\n  const handleChangeName = e => {\n    setName(e.target.value);\n  };\n\n  const handleChangeDescription = e => {\n    setDescription(e.target.value);\n  };\n\n  const handleChangeDateStart = e => {\n    setDateStart(e.target.value);\n  };\n\n  const handleChangeDateEnd = e => {\n    setDateEnd(e.target.value);\n  };\n\n  const handleSubmitNewTask = e => {\n    e.preventDefault();\n    const form = e.currentTarget;\n    dispatch(\n      addTask({\n        id,\n        task: {\n          name: form.elements.name.value,\n          description: form.elements.description.value,\n          dateStart: form.elements.dateStart.value,\n          dateEnd: form.elements.dateEnd.value,\n        },\n      })\n    );\n    form.reset();\n    navigate(`/tasks/${categoryId}`);\n  };\n\n  const handleSubmitEditedTask = e => {\n    e.preventDefault();\n    const form = e.currentTarget;\n    dispatch(\n      changeTask({\n        id,\n        task: {\n          name: form.elements.name.value,\n          description: form.elements.description.value,\n          dateStart: form.elements.dateStart.value,\n          dateEnd: form.elements.dateEnd.value,\n        },\n      })\n    );\n    form.reset();\n    navigate(`/tasks/${categoryId}`);\n  };\n\n  return (\n    <Form\n      onSubmit={\n        locationArr[1] === 'create-task'\n          ? handleSubmitNewTask\n          : handleSubmitEditedTask\n      }\n      autoComplete=\"off\"\n    >\n      <Label>\n        <Text> Name</Text>\n        <InputText\n          type=\"text\"\n          name=\"name\"\n          value={name}\n          onChange={handleChangeName}\n        />\n      </Label>\n      <Label>\n        <Text> Description</Text>\n        <InputTextArea\n          name=\"description\"\n          placeholder=\"Enter description of task here...\"\n          rows=\"5\"\n          value={description}\n          onChange={handleChangeDescription}\n        />\n      </Label>\n      <Label>\n        <Text> Name</Text>\n        <InputDate\n          type=\"date\"\n          name=\"dateStart\"\n          value={dateStart}\n          onChange={handleChangeDateStart}\n        />\n      </Label>\n      <Label>\n        <Text> Name</Text>\n        <InputDate\n          type=\"date\"\n          name=\"dateEnd\"\n          value={dateEnd}\n          onChange={handleChangeDateEnd}\n        />\n      </Label>\n      <Button type=\"submit\">\n        Save\n        <Span />\n      </Button>\n    </Form>\n  );\n};\n\nexport default CreateOrEditTaskForm;\n","import CreateOrEditTaskForm from 'components/CreateOrEditTaskForm/CreateOrEditTaskForm';\n\nconst styles = {\n  container: {\n    height: `100vh`,\n    padding: `60px`,\n    backgroundSize: `500px`,\n  },\n};\n\nexport default function CreateOrEditTask() {\n  return (\n    <div style={styles.container}>\n      <CreateOrEditTaskForm />\n    </div>\n  );\n}\n","export const selectCategories = state => state.categories.categoriesArr;\n\nexport const selectIsLoading = state => state.categories.isLoading;\n\nexport const selectError = state => state.categories.error;\n\nexport const selectCurrentCategoryId = state =>\n  state.categories.currentCategoryId;\n\nexport const selectCurrentCategoryName = state =>\n  state.categories.currentCategoryName;\n","export const selectTasks = state => state.tasks.tasksArr;\n\nexport const selectIsLoading = state => state.tasks.isLoading;\n\nexport const selectError = state => state.tasks.error;\n\nexport const selectCurrentTaskId = state => state.tasks.currentTaskId;\n\nexport const selectCurrentTask = state => state.tasks.currentTask;\n"],"names":["Form","styled","Label","Text","InputText","InputTextArea","InputDate","Button","Span","navigate","useNavigate","dispatch","useDispatch","location","useLocation","id","useParams","categoryId","useSelector","selectCurrentCategoryId","currentTask","selectCurrentTask","locationArr","pathname","split","useState","name","setName","description","setDescription","dateStart","setDateStart","dateEnd","setDateEnd","onSubmit","e","preventDefault","form","currentTarget","addTask","task","elements","value","reset","changeTask","autoComplete","type","onChange","target","placeholder","rows","styles","container","height","padding","backgroundSize","CreateOrEditTask","style","selectCategories","state","categories","categoriesArr","selectIsLoading","isLoading","currentCategoryId","selectCurrentCategoryName","currentCategoryName","selectTasks","tasks","tasksArr","selectCurrentTaskId","currentTaskId"],"sourceRoot":""}